静态代理的缺点：

	1，委托类和代理类实现的共用接口，如果需要添加新的方法时，所有实现类，包括委托类和代理类都要再去实现，增加量了码维护复杂性。
	
	2，一个代理类服务一个委托类，如果要服务多个委托类（前提都是共用同一个接口），势必要为每一个对象进行代理，一定规模下，静态代理就无法胜任了。
	
动态代理：可以通过一个代理类完成全部的代理功能。


假设，代理时间统计，日志打印两个功能，可能继续扩展到N个代理；
	
静态代理的做法，在原有时间统计的基础上，TankLogProxy， 实现Movable接收，聚合TankTimeProxy，实现两个代理功能，即代理中还有代理。

假设，在原有的基础上，共用接口增加stop()方法，静态代理代码的维护就变得吃力；动态代理是为了解决以上静态代理的遗留问题。
	
	
	1，JDK Proxy内部实现
	
		java.lang.reflect.InvocationHandler接口和 java.lang.reflect.Proxy类
	
	2，Spring实现
	
	3，CGlib实现